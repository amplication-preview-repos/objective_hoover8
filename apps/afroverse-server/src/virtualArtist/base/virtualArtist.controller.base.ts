/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VirtualArtistService } from "../virtualArtist.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VirtualArtistCreateInput } from "./VirtualArtistCreateInput";
import { VirtualArtist } from "./VirtualArtist";
import { VirtualArtistFindManyArgs } from "./VirtualArtistFindManyArgs";
import { VirtualArtistWhereUniqueInput } from "./VirtualArtistWhereUniqueInput";
import { VirtualArtistUpdateInput } from "./VirtualArtistUpdateInput";
import { AiStudioFindManyArgs } from "../../aiStudio/base/AiStudioFindManyArgs";
import { AiStudio } from "../../aiStudio/base/AiStudio";
import { AiStudioWhereUniqueInput } from "../../aiStudio/base/AiStudioWhereUniqueInput";
import { MusicChallengeFindManyArgs } from "../../musicChallenge/base/MusicChallengeFindManyArgs";
import { MusicChallenge } from "../../musicChallenge/base/MusicChallenge";
import { MusicChallengeWhereUniqueInput } from "../../musicChallenge/base/MusicChallengeWhereUniqueInput";
import { RecordLabelFindManyArgs } from "../../recordLabel/base/RecordLabelFindManyArgs";
import { RecordLabel } from "../../recordLabel/base/RecordLabel";
import { RecordLabelWhereUniqueInput } from "../../recordLabel/base/RecordLabelWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VirtualArtistControllerBase {
  constructor(
    protected readonly service: VirtualArtistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VirtualArtist })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVirtualArtist(
    @common.Body() data: VirtualArtistCreateInput
  ): Promise<VirtualArtist> {
    return await this.service.createVirtualArtist({
      data: {
        ...data,

        voiceCustomization: data.voiceCustomization
          ? {
              connect: data.voiceCustomization,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VirtualArtist] })
  @ApiNestedQuery(VirtualArtistFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async virtualArtists(
    @common.Req() request: Request
  ): Promise<VirtualArtist[]> {
    const args = plainToClass(VirtualArtistFindManyArgs, request.query);
    return this.service.virtualArtists({
      ...args,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async virtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<VirtualArtist | null> {
    const result = await this.service.virtualArtist({
      where: params,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVirtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() data: VirtualArtistUpdateInput
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.updateVirtualArtist({
        where: params,
        data: {
          ...data,

          voiceCustomization: data.voiceCustomization
            ? {
                connect: data.voiceCustomization,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          name: true,
          updatedAt: true,

          voiceCustomization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVirtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.deleteVirtualArtist({
        where: params,
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          name: true,
          updatedAt: true,

          voiceCustomization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/aiStudios")
  @ApiNestedQuery(AiStudioFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "read",
    possession: "any",
  })
  async findAiStudios(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<AiStudio[]> {
    const query = plainToClass(AiStudioFindManyArgs, request.query);
    const results = await this.service.findAiStudios(params.id, {
      ...query,
      select: {
        composition: true,
        createdAt: true,
        id: true,
        mixing: true,
        production: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiStudios")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async connectAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiStudios")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async updateAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiStudios")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async disconnectAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/musicChallenges")
  @ApiNestedQuery(MusicChallengeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "read",
    possession: "any",
  })
  async findMusicChallenges(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<MusicChallenge[]> {
    const query = plainToClass(MusicChallengeFindManyArgs, request.query);
    const results = await this.service.findMusicChallenges(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        rewards: true,
        title: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/musicChallenges")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async connectMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/musicChallenges")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async updateMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/musicChallenges")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async disconnectMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recordLabels")
  @ApiNestedQuery(RecordLabelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "read",
    possession: "any",
  })
  async findRecordLabels(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<RecordLabel[]> {
    const query = plainToClass(RecordLabelFindManyArgs, request.query);
    const results = await this.service.findRecordLabels(params.id, {
      ...query,
      select: {
        analytics: true,
        createdAt: true,
        id: true,
        name: true,
        promotions: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recordLabels")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async connectRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recordLabels")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async updateRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recordLabels")
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async disconnectRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }
}
