/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VirtualArtist } from "./VirtualArtist";
import { VirtualArtistCountArgs } from "./VirtualArtistCountArgs";
import { VirtualArtistFindManyArgs } from "./VirtualArtistFindManyArgs";
import { VirtualArtistFindUniqueArgs } from "./VirtualArtistFindUniqueArgs";
import { CreateVirtualArtistArgs } from "./CreateVirtualArtistArgs";
import { UpdateVirtualArtistArgs } from "./UpdateVirtualArtistArgs";
import { DeleteVirtualArtistArgs } from "./DeleteVirtualArtistArgs";
import { AiStudioFindManyArgs } from "../../aiStudio/base/AiStudioFindManyArgs";
import { AiStudio } from "../../aiStudio/base/AiStudio";
import { MusicChallengeFindManyArgs } from "../../musicChallenge/base/MusicChallengeFindManyArgs";
import { MusicChallenge } from "../../musicChallenge/base/MusicChallenge";
import { RecordLabelFindManyArgs } from "../../recordLabel/base/RecordLabelFindManyArgs";
import { RecordLabel } from "../../recordLabel/base/RecordLabel";
import { VoiceCustomization } from "../../voiceCustomization/base/VoiceCustomization";
import { VirtualArtistService } from "../virtualArtist.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VirtualArtist)
export class VirtualArtistResolverBase {
  constructor(
    protected readonly service: VirtualArtistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async _virtualArtistsMeta(
    @graphql.Args() args: VirtualArtistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VirtualArtist])
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async virtualArtists(
    @graphql.Args() args: VirtualArtistFindManyArgs
  ): Promise<VirtualArtist[]> {
    return this.service.virtualArtists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VirtualArtist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "own",
  })
  async virtualArtist(
    @graphql.Args() args: VirtualArtistFindUniqueArgs
  ): Promise<VirtualArtist | null> {
    const result = await this.service.virtualArtist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VirtualArtist)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "create",
    possession: "any",
  })
  async createVirtualArtist(
    @graphql.Args() args: CreateVirtualArtistArgs
  ): Promise<VirtualArtist> {
    return await this.service.createVirtualArtist({
      ...args,
      data: {
        ...args.data,

        voiceCustomization: args.data.voiceCustomization
          ? {
              connect: args.data.voiceCustomization,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VirtualArtist)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "update",
    possession: "any",
  })
  async updateVirtualArtist(
    @graphql.Args() args: UpdateVirtualArtistArgs
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.updateVirtualArtist({
        ...args,
        data: {
          ...args.data,

          voiceCustomization: args.data.voiceCustomization
            ? {
                connect: args.data.voiceCustomization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VirtualArtist)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "delete",
    possession: "any",
  })
  async deleteVirtualArtist(
    @graphql.Args() args: DeleteVirtualArtistArgs
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.deleteVirtualArtist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AiStudio], { name: "aiStudios" })
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "read",
    possession: "any",
  })
  async findAiStudios(
    @graphql.Parent() parent: VirtualArtist,
    @graphql.Args() args: AiStudioFindManyArgs
  ): Promise<AiStudio[]> {
    const results = await this.service.findAiStudios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MusicChallenge], { name: "musicChallenges" })
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "read",
    possession: "any",
  })
  async findMusicChallenges(
    @graphql.Parent() parent: VirtualArtist,
    @graphql.Args() args: MusicChallengeFindManyArgs
  ): Promise<MusicChallenge[]> {
    const results = await this.service.findMusicChallenges(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RecordLabel], { name: "recordLabels" })
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "read",
    possession: "any",
  })
  async findRecordLabels(
    @graphql.Parent() parent: VirtualArtist,
    @graphql.Args() args: RecordLabelFindManyArgs
  ): Promise<RecordLabel[]> {
    const results = await this.service.findRecordLabels(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoiceCustomization, {
    nullable: true,
    name: "voiceCustomization",
  })
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "read",
    possession: "any",
  })
  async getVoiceCustomization(
    @graphql.Parent() parent: VirtualArtist
  ): Promise<VoiceCustomization | null> {
    const result = await this.service.getVoiceCustomization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
