/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VirtualArtist as PrismaVirtualArtist,
  AiStudio as PrismaAiStudio,
  MusicChallenge as PrismaMusicChallenge,
  RecordLabel as PrismaRecordLabel,
  VoiceCustomization as PrismaVoiceCustomization,
} from "@prisma/client";

export class VirtualArtistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VirtualArtistCountArgs, "select">
  ): Promise<number> {
    return this.prisma.virtualArtist.count(args);
  }

  async virtualArtists(
    args: Prisma.VirtualArtistFindManyArgs
  ): Promise<PrismaVirtualArtist[]> {
    return this.prisma.virtualArtist.findMany(args);
  }
  async virtualArtist(
    args: Prisma.VirtualArtistFindUniqueArgs
  ): Promise<PrismaVirtualArtist | null> {
    return this.prisma.virtualArtist.findUnique(args);
  }
  async createVirtualArtist(
    args: Prisma.VirtualArtistCreateArgs
  ): Promise<PrismaVirtualArtist> {
    return this.prisma.virtualArtist.create(args);
  }
  async updateVirtualArtist(
    args: Prisma.VirtualArtistUpdateArgs
  ): Promise<PrismaVirtualArtist> {
    return this.prisma.virtualArtist.update(args);
  }
  async deleteVirtualArtist(
    args: Prisma.VirtualArtistDeleteArgs
  ): Promise<PrismaVirtualArtist> {
    return this.prisma.virtualArtist.delete(args);
  }

  async findAiStudios(
    parentId: string,
    args: Prisma.AiStudioFindManyArgs
  ): Promise<PrismaAiStudio[]> {
    return this.prisma.virtualArtist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aiStudios(args);
  }

  async findMusicChallenges(
    parentId: string,
    args: Prisma.MusicChallengeFindManyArgs
  ): Promise<PrismaMusicChallenge[]> {
    return this.prisma.virtualArtist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .musicChallenges(args);
  }

  async findRecordLabels(
    parentId: string,
    args: Prisma.RecordLabelFindManyArgs
  ): Promise<PrismaRecordLabel[]> {
    return this.prisma.virtualArtist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recordLabels(args);
  }

  async getVoiceCustomization(
    parentId: string
  ): Promise<PrismaVoiceCustomization | null> {
    return this.prisma.virtualArtist
      .findUnique({
        where: { id: parentId },
      })
      .voiceCustomization();
  }
}
