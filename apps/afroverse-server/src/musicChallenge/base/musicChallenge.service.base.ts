/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MusicChallenge as PrismaMusicChallenge,
  VirtualArtist as PrismaVirtualArtist,
} from "@prisma/client";

export class MusicChallengeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MusicChallengeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.musicChallenge.count(args);
  }

  async musicChallenges(
    args: Prisma.MusicChallengeFindManyArgs
  ): Promise<PrismaMusicChallenge[]> {
    return this.prisma.musicChallenge.findMany(args);
  }
  async musicChallenge(
    args: Prisma.MusicChallengeFindUniqueArgs
  ): Promise<PrismaMusicChallenge | null> {
    return this.prisma.musicChallenge.findUnique(args);
  }
  async createMusicChallenge(
    args: Prisma.MusicChallengeCreateArgs
  ): Promise<PrismaMusicChallenge> {
    return this.prisma.musicChallenge.create(args);
  }
  async updateMusicChallenge(
    args: Prisma.MusicChallengeUpdateArgs
  ): Promise<PrismaMusicChallenge> {
    return this.prisma.musicChallenge.update(args);
  }
  async deleteMusicChallenge(
    args: Prisma.MusicChallengeDeleteArgs
  ): Promise<PrismaMusicChallenge> {
    return this.prisma.musicChallenge.delete(args);
  }

  async getVirtualArtist(
    parentId: string
  ): Promise<PrismaVirtualArtist | null> {
    return this.prisma.musicChallenge
      .findUnique({
        where: { id: parentId },
      })
      .virtualArtist();
  }
}
