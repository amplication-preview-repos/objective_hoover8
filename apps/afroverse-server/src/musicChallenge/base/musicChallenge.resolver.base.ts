/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MusicChallenge } from "./MusicChallenge";
import { MusicChallengeCountArgs } from "./MusicChallengeCountArgs";
import { MusicChallengeFindManyArgs } from "./MusicChallengeFindManyArgs";
import { MusicChallengeFindUniqueArgs } from "./MusicChallengeFindUniqueArgs";
import { CreateMusicChallengeArgs } from "./CreateMusicChallengeArgs";
import { UpdateMusicChallengeArgs } from "./UpdateMusicChallengeArgs";
import { DeleteMusicChallengeArgs } from "./DeleteMusicChallengeArgs";
import { VirtualArtist } from "../../virtualArtist/base/VirtualArtist";
import { MusicChallengeService } from "../musicChallenge.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MusicChallenge)
export class MusicChallengeResolverBase {
  constructor(
    protected readonly service: MusicChallengeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "read",
    possession: "any",
  })
  async _musicChallengesMeta(
    @graphql.Args() args: MusicChallengeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MusicChallenge])
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "read",
    possession: "any",
  })
  async musicChallenges(
    @graphql.Args() args: MusicChallengeFindManyArgs
  ): Promise<MusicChallenge[]> {
    return this.service.musicChallenges(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MusicChallenge, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "read",
    possession: "own",
  })
  async musicChallenge(
    @graphql.Args() args: MusicChallengeFindUniqueArgs
  ): Promise<MusicChallenge | null> {
    const result = await this.service.musicChallenge(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MusicChallenge)
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "create",
    possession: "any",
  })
  async createMusicChallenge(
    @graphql.Args() args: CreateMusicChallengeArgs
  ): Promise<MusicChallenge> {
    return await this.service.createMusicChallenge({
      ...args,
      data: {
        ...args.data,

        virtualArtist: args.data.virtualArtist
          ? {
              connect: args.data.virtualArtist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MusicChallenge)
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "update",
    possession: "any",
  })
  async updateMusicChallenge(
    @graphql.Args() args: UpdateMusicChallengeArgs
  ): Promise<MusicChallenge | null> {
    try {
      return await this.service.updateMusicChallenge({
        ...args,
        data: {
          ...args.data,

          virtualArtist: args.data.virtualArtist
            ? {
                connect: args.data.virtualArtist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MusicChallenge)
  @nestAccessControl.UseRoles({
    resource: "MusicChallenge",
    action: "delete",
    possession: "any",
  })
  async deleteMusicChallenge(
    @graphql.Args() args: DeleteMusicChallengeArgs
  ): Promise<MusicChallenge | null> {
    try {
      return await this.service.deleteMusicChallenge(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VirtualArtist, {
    nullable: true,
    name: "virtualArtist",
  })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async getVirtualArtist(
    @graphql.Parent() parent: MusicChallenge
  ): Promise<VirtualArtist | null> {
    const result = await this.service.getVirtualArtist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
