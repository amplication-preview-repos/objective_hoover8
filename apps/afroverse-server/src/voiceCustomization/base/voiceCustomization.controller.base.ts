/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoiceCustomizationService } from "../voiceCustomization.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoiceCustomizationCreateInput } from "./VoiceCustomizationCreateInput";
import { VoiceCustomization } from "./VoiceCustomization";
import { VoiceCustomizationFindManyArgs } from "./VoiceCustomizationFindManyArgs";
import { VoiceCustomizationWhereUniqueInput } from "./VoiceCustomizationWhereUniqueInput";
import { VoiceCustomizationUpdateInput } from "./VoiceCustomizationUpdateInput";
import { VirtualArtistFindManyArgs } from "../../virtualArtist/base/VirtualArtistFindManyArgs";
import { VirtualArtist } from "../../virtualArtist/base/VirtualArtist";
import { VirtualArtistWhereUniqueInput } from "../../virtualArtist/base/VirtualArtistWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoiceCustomizationControllerBase {
  constructor(
    protected readonly service: VoiceCustomizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoiceCustomization })
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoiceCustomization(
    @common.Body() data: VoiceCustomizationCreateInput
  ): Promise<VoiceCustomization> {
    return await this.service.createVoiceCustomization({
      data: data,
      select: {
        aiGeneratedVoice: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        voiceClonedFrom: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VoiceCustomization] })
  @ApiNestedQuery(VoiceCustomizationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voiceCustomizations(
    @common.Req() request: Request
  ): Promise<VoiceCustomization[]> {
    const args = plainToClass(VoiceCustomizationFindManyArgs, request.query);
    return this.service.voiceCustomizations({
      ...args,
      select: {
        aiGeneratedVoice: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        voiceClonedFrom: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoiceCustomization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voiceCustomization(
    @common.Param() params: VoiceCustomizationWhereUniqueInput
  ): Promise<VoiceCustomization | null> {
    const result = await this.service.voiceCustomization({
      where: params,
      select: {
        aiGeneratedVoice: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        voiceClonedFrom: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoiceCustomization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoiceCustomization(
    @common.Param() params: VoiceCustomizationWhereUniqueInput,
    @common.Body() data: VoiceCustomizationUpdateInput
  ): Promise<VoiceCustomization | null> {
    try {
      return await this.service.updateVoiceCustomization({
        where: params,
        data: data,
        select: {
          aiGeneratedVoice: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          voiceClonedFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoiceCustomization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoiceCustomization(
    @common.Param() params: VoiceCustomizationWhereUniqueInput
  ): Promise<VoiceCustomization | null> {
    try {
      return await this.service.deleteVoiceCustomization({
        where: params,
        select: {
          aiGeneratedVoice: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          voiceClonedFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/virtualArtists")
  @ApiNestedQuery(VirtualArtistFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async findVirtualArtists(
    @common.Req() request: Request,
    @common.Param() params: VoiceCustomizationWhereUniqueInput
  ): Promise<VirtualArtist[]> {
    const query = plainToClass(VirtualArtistFindManyArgs, request.query);
    const results = await this.service.findVirtualArtists(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/virtualArtists")
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "update",
    possession: "any",
  })
  async connectVirtualArtists(
    @common.Param() params: VoiceCustomizationWhereUniqueInput,
    @common.Body() body: VirtualArtistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualArtists: {
        connect: body,
      },
    };
    await this.service.updateVoiceCustomization({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/virtualArtists")
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "update",
    possession: "any",
  })
  async updateVirtualArtists(
    @common.Param() params: VoiceCustomizationWhereUniqueInput,
    @common.Body() body: VirtualArtistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualArtists: {
        set: body,
      },
    };
    await this.service.updateVoiceCustomization({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/virtualArtists")
  @nestAccessControl.UseRoles({
    resource: "VoiceCustomization",
    action: "update",
    possession: "any",
  })
  async disconnectVirtualArtists(
    @common.Param() params: VoiceCustomizationWhereUniqueInput,
    @common.Body() body: VirtualArtistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      virtualArtists: {
        disconnect: body,
      },
    };
    await this.service.updateVoiceCustomization({
      where: params,
      data,
      select: { id: true },
    });
  }
}
