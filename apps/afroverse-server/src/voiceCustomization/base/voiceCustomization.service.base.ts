/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VoiceCustomization as PrismaVoiceCustomization,
  VirtualArtist as PrismaVirtualArtist,
} from "@prisma/client";

export class VoiceCustomizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoiceCustomizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voiceCustomization.count(args);
  }

  async voiceCustomizations(
    args: Prisma.VoiceCustomizationFindManyArgs
  ): Promise<PrismaVoiceCustomization[]> {
    return this.prisma.voiceCustomization.findMany(args);
  }
  async voiceCustomization(
    args: Prisma.VoiceCustomizationFindUniqueArgs
  ): Promise<PrismaVoiceCustomization | null> {
    return this.prisma.voiceCustomization.findUnique(args);
  }
  async createVoiceCustomization(
    args: Prisma.VoiceCustomizationCreateArgs
  ): Promise<PrismaVoiceCustomization> {
    return this.prisma.voiceCustomization.create(args);
  }
  async updateVoiceCustomization(
    args: Prisma.VoiceCustomizationUpdateArgs
  ): Promise<PrismaVoiceCustomization> {
    return this.prisma.voiceCustomization.update(args);
  }
  async deleteVoiceCustomization(
    args: Prisma.VoiceCustomizationDeleteArgs
  ): Promise<PrismaVoiceCustomization> {
    return this.prisma.voiceCustomization.delete(args);
  }

  async findVirtualArtists(
    parentId: string,
    args: Prisma.VirtualArtistFindManyArgs
  ): Promise<PrismaVirtualArtist[]> {
    return this.prisma.voiceCustomization
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .virtualArtists(args);
  }
}
