/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AiStudio } from "./AiStudio";
import { AiStudioCountArgs } from "./AiStudioCountArgs";
import { AiStudioFindManyArgs } from "./AiStudioFindManyArgs";
import { AiStudioFindUniqueArgs } from "./AiStudioFindUniqueArgs";
import { CreateAiStudioArgs } from "./CreateAiStudioArgs";
import { UpdateAiStudioArgs } from "./UpdateAiStudioArgs";
import { DeleteAiStudioArgs } from "./DeleteAiStudioArgs";
import { VirtualArtist } from "../../virtualArtist/base/VirtualArtist";
import { AiStudioService } from "../aiStudio.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiStudio)
export class AiStudioResolverBase {
  constructor(
    protected readonly service: AiStudioService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "read",
    possession: "any",
  })
  async _aiStudiosMeta(
    @graphql.Args() args: AiStudioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiStudio])
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "read",
    possession: "any",
  })
  async aiStudios(
    @graphql.Args() args: AiStudioFindManyArgs
  ): Promise<AiStudio[]> {
    return this.service.aiStudios(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiStudio, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "read",
    possession: "own",
  })
  async aiStudio(
    @graphql.Args() args: AiStudioFindUniqueArgs
  ): Promise<AiStudio | null> {
    const result = await this.service.aiStudio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiStudio)
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "create",
    possession: "any",
  })
  async createAiStudio(
    @graphql.Args() args: CreateAiStudioArgs
  ): Promise<AiStudio> {
    return await this.service.createAiStudio({
      ...args,
      data: {
        ...args.data,

        virtualArtist: args.data.virtualArtist
          ? {
              connect: args.data.virtualArtist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiStudio)
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "update",
    possession: "any",
  })
  async updateAiStudio(
    @graphql.Args() args: UpdateAiStudioArgs
  ): Promise<AiStudio | null> {
    try {
      return await this.service.updateAiStudio({
        ...args,
        data: {
          ...args.data,

          virtualArtist: args.data.virtualArtist
            ? {
                connect: args.data.virtualArtist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiStudio)
  @nestAccessControl.UseRoles({
    resource: "AiStudio",
    action: "delete",
    possession: "any",
  })
  async deleteAiStudio(
    @graphql.Args() args: DeleteAiStudioArgs
  ): Promise<AiStudio | null> {
    try {
      return await this.service.deleteAiStudio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VirtualArtist, {
    nullable: true,
    name: "virtualArtist",
  })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async getVirtualArtist(
    @graphql.Parent() parent: AiStudio
  ): Promise<VirtualArtist | null> {
    const result = await this.service.getVirtualArtist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
