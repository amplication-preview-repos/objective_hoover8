/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AiStudio as PrismaAiStudio,
  VirtualArtist as PrismaVirtualArtist,
} from "@prisma/client";

export class AiStudioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AiStudioCountArgs, "select">): Promise<number> {
    return this.prisma.aiStudio.count(args);
  }

  async aiStudios(
    args: Prisma.AiStudioFindManyArgs
  ): Promise<PrismaAiStudio[]> {
    return this.prisma.aiStudio.findMany(args);
  }
  async aiStudio(
    args: Prisma.AiStudioFindUniqueArgs
  ): Promise<PrismaAiStudio | null> {
    return this.prisma.aiStudio.findUnique(args);
  }
  async createAiStudio(
    args: Prisma.AiStudioCreateArgs
  ): Promise<PrismaAiStudio> {
    return this.prisma.aiStudio.create(args);
  }
  async updateAiStudio(
    args: Prisma.AiStudioUpdateArgs
  ): Promise<PrismaAiStudio> {
    return this.prisma.aiStudio.update(args);
  }
  async deleteAiStudio(
    args: Prisma.AiStudioDeleteArgs
  ): Promise<PrismaAiStudio> {
    return this.prisma.aiStudio.delete(args);
  }

  async getVirtualArtist(
    parentId: string
  ): Promise<PrismaVirtualArtist | null> {
    return this.prisma.aiStudio
      .findUnique({
        where: { id: parentId },
      })
      .virtualArtist();
  }
}
