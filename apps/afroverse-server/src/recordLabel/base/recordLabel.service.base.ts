/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecordLabel as PrismaRecordLabel,
  VirtualArtist as PrismaVirtualArtist,
} from "@prisma/client";

export class RecordLabelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecordLabelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recordLabel.count(args);
  }

  async recordLabels(
    args: Prisma.RecordLabelFindManyArgs
  ): Promise<PrismaRecordLabel[]> {
    return this.prisma.recordLabel.findMany(args);
  }
  async recordLabel(
    args: Prisma.RecordLabelFindUniqueArgs
  ): Promise<PrismaRecordLabel | null> {
    return this.prisma.recordLabel.findUnique(args);
  }
  async createRecordLabel(
    args: Prisma.RecordLabelCreateArgs
  ): Promise<PrismaRecordLabel> {
    return this.prisma.recordLabel.create(args);
  }
  async updateRecordLabel(
    args: Prisma.RecordLabelUpdateArgs
  ): Promise<PrismaRecordLabel> {
    return this.prisma.recordLabel.update(args);
  }
  async deleteRecordLabel(
    args: Prisma.RecordLabelDeleteArgs
  ): Promise<PrismaRecordLabel> {
    return this.prisma.recordLabel.delete(args);
  }

  async getVirtualArtist(
    parentId: string
  ): Promise<PrismaVirtualArtist | null> {
    return this.prisma.recordLabel
      .findUnique({
        where: { id: parentId },
      })
      .virtualArtist();
  }
}
