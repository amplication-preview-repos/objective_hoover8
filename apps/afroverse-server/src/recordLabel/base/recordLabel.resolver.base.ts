/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RecordLabel } from "./RecordLabel";
import { RecordLabelCountArgs } from "./RecordLabelCountArgs";
import { RecordLabelFindManyArgs } from "./RecordLabelFindManyArgs";
import { RecordLabelFindUniqueArgs } from "./RecordLabelFindUniqueArgs";
import { CreateRecordLabelArgs } from "./CreateRecordLabelArgs";
import { UpdateRecordLabelArgs } from "./UpdateRecordLabelArgs";
import { DeleteRecordLabelArgs } from "./DeleteRecordLabelArgs";
import { VirtualArtist } from "../../virtualArtist/base/VirtualArtist";
import { RecordLabelService } from "../recordLabel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RecordLabel)
export class RecordLabelResolverBase {
  constructor(
    protected readonly service: RecordLabelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "read",
    possession: "any",
  })
  async _recordLabelsMeta(
    @graphql.Args() args: RecordLabelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RecordLabel])
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "read",
    possession: "any",
  })
  async recordLabels(
    @graphql.Args() args: RecordLabelFindManyArgs
  ): Promise<RecordLabel[]> {
    return this.service.recordLabels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RecordLabel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "read",
    possession: "own",
  })
  async recordLabel(
    @graphql.Args() args: RecordLabelFindUniqueArgs
  ): Promise<RecordLabel | null> {
    const result = await this.service.recordLabel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecordLabel)
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "create",
    possession: "any",
  })
  async createRecordLabel(
    @graphql.Args() args: CreateRecordLabelArgs
  ): Promise<RecordLabel> {
    return await this.service.createRecordLabel({
      ...args,
      data: {
        ...args.data,

        virtualArtist: args.data.virtualArtist
          ? {
              connect: args.data.virtualArtist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecordLabel)
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "update",
    possession: "any",
  })
  async updateRecordLabel(
    @graphql.Args() args: UpdateRecordLabelArgs
  ): Promise<RecordLabel | null> {
    try {
      return await this.service.updateRecordLabel({
        ...args,
        data: {
          ...args.data,

          virtualArtist: args.data.virtualArtist
            ? {
                connect: args.data.virtualArtist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecordLabel)
  @nestAccessControl.UseRoles({
    resource: "RecordLabel",
    action: "delete",
    possession: "any",
  })
  async deleteRecordLabel(
    @graphql.Args() args: DeleteRecordLabelArgs
  ): Promise<RecordLabel | null> {
    try {
      return await this.service.deleteRecordLabel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VirtualArtist, {
    nullable: true,
    name: "virtualArtist",
  })
  @nestAccessControl.UseRoles({
    resource: "VirtualArtist",
    action: "read",
    possession: "any",
  })
  async getVirtualArtist(
    @graphql.Parent() parent: RecordLabel
  ): Promise<VirtualArtist | null> {
    const result = await this.service.getVirtualArtist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
